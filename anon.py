import telebot
import sqlite3
import secrets

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
BOT_TOKEN = "12345678_qwaszxerfdcvtyghbnuijkm"
# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = 12345678

bot = telebot.TeleBot(BOT_TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ)
conn = sqlite3.connect('anon_bot.db', check_same_thread=False)
cursor = conn.cursor()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü - —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º –∫–æ–¥–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        unique_code TEXT UNIQUE
    )
''')

cursor.execute('''
    CREATE TABLE IF NOT EXISTS messages (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    sender_id INTEGER,
    recipient_id INTEGER,
    message TEXT,
    reply_to INTEGER DEFAULT NULL,  -- ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    message_level INTEGER DEFAULT 0,
    content_type TEXT DEFAULT 'text',
    file_id TEXT DEFAULT NULL,
    FOREIGN KEY (sender_id) REFERENCES users(user_id),
    FOREIGN KEY (recipient_id) REFERENCES users(user_id),
    FOREIGN KEY (reply_to) REFERENCES messages(id)
    )
''')
conn.commit()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_all_user_ids(db_cursor):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users.
    """
    db_cursor.execute("SELECT user_id FROM users")
    rows = db_cursor.fetchall()
    return [row[0] for row in rows]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /broadcast
@bot.message_handler(commands=['broadcast'])
def broadcast_command(message):
    if message.from_user.id == ADMIN_ID:
        text = message.text.split(' ', 1)[1] if len(message.text.split(' ', 1)) > 1 else None
        if text:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            try:
                user_ids = get_all_user_ids(cursor)

                for user_id in user_ids:
                    try:
                        bot.send_message(user_id, text,parse_mode= "Markdown")
                    except telebot.apihelper.ApiTelegramException as e:
                        if e.result_json['description'] == 'Forbidden: bot was blocked by the user':
                            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
                            # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
                            # cursor.execute("DELETE FROM users WHERE user_id = ?", (user_id,))
                            # conn.commit()
                        else:
                            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    except Exception as e:
                        print(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                bot.reply_to(message, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π: {e}")
                bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

        else:
            bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /broadcast")

    else:
        bot.reply_to(message, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. /help")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def get_user_code(user_id):
    cursor.execute("SELECT unique_code FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    return result[0] if result else None

def get_user_id_by_code(code):
    cursor.execute("SELECT user_id FROM users WHERE unique_code = ?", (code,))
    result = cursor.fetchone()
    return result[0] if result else None

def add_user(user_id, unique_code):
    cursor.execute("INSERT INTO users (user_id, unique_code) VALUES (?, ?)", (user_id, unique_code))
    conn.commit()

def add_message(sender_id, recipient_id, message, reply_to=None, message_level=0, content_type='text', file_id=None):
    cursor.execute("INSERT INTO messages (sender_id, recipient_id, message, reply_to, message_level, content_type, file_id) VALUES (?, ?, ?, ?, ?, ?, ?)", (sender_id, recipient_id, message, reply_to, message_level, content_type, file_id))
    conn.commit()
    return cursor.lastrowid

def get_message(message_id):
    cursor.execute("SELECT * FROM messages WHERE id = ?", (message_id,))
    return cursor.fetchone()

#####################################
#####################################
#####################################
#####################################
#####################################
#####################################

@bot.message_handler(commands=['start','link'])
def start(message):
    user_id = message.from_user.id
    if len(message.text.split()) > 1:
        handle_start_with_code(message)
        return
    user_code = get_user_code(user_id)
    if not user_code:
        unique_code = secrets.token_urlsafe(8)
        add_user(user_id, unique_code)
        link = f"t.me/{bot.get_me().username}?start={unique_code}"
        bot.send_message(user_id,f"üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π!\n\n–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?ü§î\n\n1) –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏ —Ä–∞–∑–º–µ—â–∞–µ—Ç–µ –µ—ë –≥–¥–µ —É–≥–æ–¥–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä , –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è) üîó\n2) –õ—é–±–æ–π –∂–µ–ª–∞—é—â–∏–π –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ , —Ñ–æ—Ç–æ , –≤–∏–¥–µ–æ , GIF –∏–ª–∏ —Å—Ç–∏–∫–µ—Ä! üì©\n3) –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞ –µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å , –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—è –∞–Ω–æ–Ω–∏–º–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä üöÄ\n\n–ß–µ–≥–æ —Ç—ã –∂–¥—ë—à—å? –ù–∞–∂–∏–º–∞–π –Ω–∞ /link –∏ –Ω–∞—á–Ω–∏ –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —É–∂–µ —Å–µ–≥–æ–¥–Ω—è! üöÄ")
        bot.send_message(user_id, f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:\n{link}")
    else:
        link = f"t.me/{bot.get_me().username}?start={user_code}"
        bot.send_message(user_id, f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞:\n{link}")

@bot.message_handler(commands=['help'])
def help(message):
    user_id = message.from_user.id
    bot.send_message(user_id,f"–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?ü§î\n\n1) –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏ —Ä–∞–∑–º–µ—â–∞–µ—Ç–µ –µ—ë –≥–¥–µ —É–≥–æ–¥–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä , –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è) üîó\n2) –õ—é–±–æ–π –∂–µ–ª–∞—é—â–∏–π –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ , —Ñ–æ—Ç–æ , –≤–∏–¥–µ–æ , GIF –∏–ª–∏ —Å—Ç–∏–∫–µ—Ä! üì©\n3) –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞ –µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å , –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—è –∞–Ω–æ–Ω–∏–º–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä üöÄ/")

@bot.message_handler(commands=['stats'])
def stats(message):
    bot.send_message(message.from_user.id, f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ... –ê –≥–¥–µ –æ–Ω–∞?\n\n–ú—ã –Ω–µ —Å–æ–±–∏—Ä–∞–µ–º –ø–æ–¥–æ–±–Ω–æ–≥–æ —Ä–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ü–µ–ª—è—Ö –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏. –ü–æ—ç—Ç–æ–º—É , –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–≤–µ—Ä—è—Ç—å –±–æ—Ç—É üòâ")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Å—Å—ã–ª–∫–µ
def handle_start_with_code(message):
    code = message.text.split()[1]
    recipient_id = get_user_id_by_code(code)
    if recipient_id:
        bot.send_message(message.from_user.id, "üì© –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, GIF –∏–ª–∏ —Å—Ç–∏–∫–µ—Ä:")
        bot.register_next_step_handler(message, lambda msg: process_anonymous_message(msg, recipient_id))
    else:
        bot.send_message(message.from_user.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ü§î")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, GIF, —Å—Ç–∏–∫–µ—Ä)
def process_anonymous_message(message, recipient_id):
    sender_id = message.from_user.id
    content_type = message.content_type
    file_id = None
    caption = None

    if content_type == 'photo':
        file_id = message.photo[-1].file_id
        caption = message.caption
    elif content_type == 'video':
        file_id = message.video.file_id
        caption = message.caption
    elif content_type == 'animation':
        file_id = message.animation.file_id
        caption = message.caption
    elif content_type == 'sticker':
        file_id = message.sticker.file_id
    elif content_type == 'text':
        pass # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ
    else:
        bot.send_message(sender_id, "–î–∞–Ω–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è :(")
        return

    message_id = add_message(sender_id, recipient_id, message.text if content_type == 'text' else caption, content_type=content_type, file_id=file_id)

    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å üíå", callback_data=f"reply_{message_id}"))

    if content_type == 'text':
        bot.send_message(recipient_id, f"–í–∞–º –ø—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! üíå\n\n{message.text}", reply_markup=markup)
    elif content_type == 'photo':
        bot.send_photo(recipient_id, file_id, caption=f"–í–∞–º –ø—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! üíå\n\n{caption if caption else ''}", reply_markup=markup)
    elif content_type == 'video':
        bot.send_video(recipient_id, file_id, caption=f"–í–∞–º –ø—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! üíå\n\n{caption if caption else ''}", reply_markup=markup)
    elif content_type == 'animation':
        bot.send_animation(recipient_id, file_id, caption=f"–í–∞–º –ø—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! üíå\n\n{caption if caption else ''}", reply_markup=markup)
    elif content_type == 'sticker':
        bot.send_sticker(recipient_id, file_id, reply_markup=markup)
    bot.send_message(sender_id, "üí¨")
    bot.send_message(sender_id, "üöÄ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–≤–µ—Ç–∏—Ç—å"
@bot.callback_query_handler(func=lambda call: call.data.startswith('reply_'))
def callback_reply(call):
    message_id = int(call.data.split('_')[1])
    bot.send_message(call.from_user.id, f"üì© –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ GIF:")
    bot.register_next_step_handler(call.message, lambda msg: process_reply_to_message(msg, message_id))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
def process_reply_to_message(message, reply_to_id):
    sender_id = message.from_user.id
    original_message = get_message(reply_to_id)

    if original_message:
        recipient_id = original_message[1]
        message_level = original_message[5] + 1
        content_type = message.content_type
        file_id = None
        caption = None

        if content_type == 'photo':
            file_id = message.photo[-1].file_id
            caption = message.caption
        elif content_type == 'video':
            file_id = message.video.file_id
            caption = message.caption
        elif content_type == 'animation':
            file_id = message.animation.file_id
            caption = message.caption
        elif content_type == 'sticker':
            bot.send_message(sender_id,"–°—Ç–∏–∫–µ—Ä—ã –Ω–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ –æ—Ç–≤–µ—Ç!")
        elif content_type == 'text':
            pass # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ
        else:
            bot.send_message(sender_id, "–î–∞–Ω–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return

        reply_message_id = add_message(sender_id, recipient_id, message.text if content_type == 'text' else caption, reply_to=reply_to_id, message_level=message_level, content_type=content_type, file_id=file_id)

        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(telebot.types.InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å üíå", callback_data=f"reply_{reply_message_id}"))

        indent = "" * message_level
        if content_type == 'text':
            bot.send_message(recipient_id, f"üíå –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{indent}{message.text}", reply_markup=markup)
        elif content_type == 'photo':
            bot.send_photo(recipient_id, file_id, caption=f"üíå –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{indent}{caption if caption else ''}", reply_markup=markup)
        elif content_type == 'video':
            bot.send_video(recipient_id, file_id, caption=f"üíå –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{indent}{caption if caption else ''}", reply_markup=markup)
        elif content_type == 'animation':
            bot.send_animation(recipient_id, file_id, caption=f"üíå –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{indent}{caption if caption else ''}", reply_markup=markup)
        elif content_type == 'sticker':
            bot.send_sticker(recipient_id, file_id, reply_markup=markup)
        bot.send_message(sender_id, f"üöÄ –í–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    else:
        bot.send_message(sender_id, "ü§î –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫\n\n–í–æ–∑–º–æ–∂–Ω–æ , –±–æ—Ç –±—ã–ª –æ–±–Ω–æ–≤–ª—ë–Ω\n\nüì© –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å , –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å—Å—ã–ª–∫–∏ –æ–±–Ω–æ–≤–∏—Ç—å –µ—ë —á–µ—Ä–µ–∑ –±–æ—Ç–∞.")

@bot.message_handler(commands=['disable_link'])
def disable_link(message):
    bot.send_message(message.from_user.id,f'üö´ –û—Ç–∫–ª—é—á–∏—Ç—å —Å—Å—ã–ª–∫—É –≤—ã –º–æ–∂–µ—Ç–µ , –Ω–∞–ø–∏—Å–∞–≤ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –±–æ—Ç–∞ (—Å–º. –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞)')

bot.infinity_polling()
